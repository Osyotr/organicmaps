// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: drules_struct.proto
// Protobuf C++ Version: 5.29.3

#include "drules_struct.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr SymbolRuleProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        apply_for_type_{0},
        priority_{0},
        min_distance_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SymbolRuleProto::SymbolRuleProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SymbolRuleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SymbolRuleProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SymbolRuleProtoDefaultTypeInternal() {}
  union {
    SymbolRuleProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SymbolRuleProtoDefaultTypeInternal _SymbolRuleProto_default_instance_;

inline constexpr ShieldRuleProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : height_{0},
        color_{0u},
        stroke_color_{0u},
        priority_{0},
        min_distance_{0},
        text_color_{0u},
        text_stroke_color_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ShieldRuleProto::ShieldRuleProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ShieldRuleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShieldRuleProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShieldRuleProtoDefaultTypeInternal() {}
  union {
    ShieldRuleProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShieldRuleProtoDefaultTypeInternal _ShieldRuleProto_default_instance_;

inline constexpr PathSymProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        step_{0},
        offset_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PathSymProto::PathSymProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PathSymProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathSymProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathSymProtoDefaultTypeInternal() {}
  union {
    PathSymProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathSymProtoDefaultTypeInternal _PathSymProto_default_instance_;

inline constexpr DashDotProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : dd_{},
        offset_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DashDotProto::DashDotProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DashDotProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DashDotProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DashDotProtoDefaultTypeInternal() {}
  union {
    DashDotProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DashDotProtoDefaultTypeInternal _DashDotProto_default_instance_;

inline constexpr ColorElementProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        color_{0u},
        x_{0},
        y_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ColorElementProto::ColorElementProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ColorElementProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorElementProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorElementProtoDefaultTypeInternal() {}
  union {
    ColorElementProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorElementProtoDefaultTypeInternal _ColorElementProto_default_instance_;

inline constexpr CaptionDefProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        height_{0},
        color_{0u},
        stroke_color_{0u},
        offset_x_{0},
        offset_y_{0},
        is_optional_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CaptionDefProto::CaptionDefProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CaptionDefProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CaptionDefProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CaptionDefProtoDefaultTypeInternal() {}
  union {
    CaptionDefProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CaptionDefProtoDefaultTypeInternal _CaptionDefProto_default_instance_;

inline constexpr PathTextRuleProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        primary_{nullptr},
        secondary_{nullptr},
        priority_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PathTextRuleProto::PathTextRuleProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PathTextRuleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathTextRuleProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathTextRuleProtoDefaultTypeInternal() {}
  union {
    PathTextRuleProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathTextRuleProtoDefaultTypeInternal _PathTextRuleProto_default_instance_;

inline constexpr LineRuleProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        dashdot_{nullptr},
        pathsym_{nullptr},
        width_{0},
        color_{0u},
        priority_{0},
        join_{static_cast< ::LineJoin >(0)},
        cap_{static_cast< ::LineCap >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR LineRuleProto::LineRuleProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LineRuleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineRuleProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineRuleProtoDefaultTypeInternal() {}
  union {
    LineRuleProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineRuleProtoDefaultTypeInternal _LineRuleProto_default_instance_;

inline constexpr LineDefProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        dashdot_{nullptr},
        pathsym_{nullptr},
        width_{0},
        color_{0u},
        join_{static_cast< ::LineJoin >(0)},
        cap_{static_cast< ::LineCap >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR LineDefProto::LineDefProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LineDefProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineDefProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineDefProtoDefaultTypeInternal() {}
  union {
    LineDefProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineDefProtoDefaultTypeInternal _LineDefProto_default_instance_;

inline constexpr ColorsElementProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ColorsElementProto::ColorsElementProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ColorsElementProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorsElementProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorsElementProtoDefaultTypeInternal() {}
  union {
    ColorsElementProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorsElementProtoDefaultTypeInternal _ColorsElementProto_default_instance_;

inline constexpr CaptionRuleProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        primary_{nullptr},
        secondary_{nullptr},
        priority_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CaptionRuleProto::CaptionRuleProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CaptionRuleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CaptionRuleProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CaptionRuleProtoDefaultTypeInternal() {}
  union {
    CaptionRuleProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CaptionRuleProtoDefaultTypeInternal _CaptionRuleProto_default_instance_;

inline constexpr CircleRuleProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        border_{nullptr},
        radius_{0},
        color_{0u},
        priority_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CircleRuleProto::CircleRuleProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CircleRuleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CircleRuleProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CircleRuleProtoDefaultTypeInternal() {}
  union {
    CircleRuleProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CircleRuleProtoDefaultTypeInternal _CircleRuleProto_default_instance_;

inline constexpr AreaRuleProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        border_{nullptr},
        color_{0u},
        priority_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AreaRuleProto::AreaRuleProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AreaRuleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AreaRuleProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AreaRuleProtoDefaultTypeInternal() {}
  union {
    AreaRuleProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AreaRuleProtoDefaultTypeInternal _AreaRuleProto_default_instance_;

inline constexpr DrawElementProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        lines_{},
        apply_if_{},
        area_{nullptr},
        symbol_{nullptr},
        caption_{nullptr},
        circle_{nullptr},
        path_text_{nullptr},
        shield_{nullptr},
        scale_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DrawElementProto::DrawElementProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DrawElementProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrawElementProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrawElementProtoDefaultTypeInternal() {}
  union {
    DrawElementProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrawElementProtoDefaultTypeInternal _DrawElementProto_default_instance_;

inline constexpr ClassifElementProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : element_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ClassifElementProto::ClassifElementProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ClassifElementProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassifElementProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassifElementProtoDefaultTypeInternal() {}
  union {
    ClassifElementProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassifElementProtoDefaultTypeInternal _ClassifElementProto_default_instance_;

inline constexpr ContainerProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        cont_{},
        colors_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ContainerProto::ContainerProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ContainerProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContainerProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContainerProtoDefaultTypeInternal() {}
  union {
    ContainerProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContainerProtoDefaultTypeInternal _ContainerProto_default_instance_;
PROTOBUF_CONSTINIT const uint32_t LineJoin_internal_data_[] = {
    196608u, 0u, };
bool LineJoin_IsValid(int value) {
  return 0 <= value && value <= 2;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    LineJoin_strings[3] = {};

static const char LineJoin_names[] = {
    "BEVELJOIN"
    "NOJOIN"
    "ROUNDJOIN"
};

static const ::google::protobuf::internal::EnumEntry LineJoin_entries[] =
    {
        {{&LineJoin_names[0], 9}, 1},
        {{&LineJoin_names[9], 6}, 2},
        {{&LineJoin_names[15], 9}, 0},
};

static const int LineJoin_entries_by_number[] = {
    2,  // 0 -> ROUNDJOIN
    0,  // 1 -> BEVELJOIN
    1,  // 2 -> NOJOIN
};

const std::string& LineJoin_Name(LineJoin value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          LineJoin_entries, LineJoin_entries_by_number,
          3, LineJoin_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      LineJoin_entries, LineJoin_entries_by_number, 3,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : LineJoin_strings[idx].get();
}

bool LineJoin_Parse(absl::string_view name, LineJoin* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      LineJoin_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<LineJoin>(int_value);
  }
  return success;
}
PROTOBUF_CONSTINIT const uint32_t LineCap_internal_data_[] = {
    196608u, 0u, };
bool LineCap_IsValid(int value) {
  return 0 <= value && value <= 2;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    LineCap_strings[3] = {};

static const char LineCap_names[] = {
    "BUTTCAP"
    "ROUNDCAP"
    "SQUARECAP"
};

static const ::google::protobuf::internal::EnumEntry LineCap_entries[] =
    {
        {{&LineCap_names[0], 7}, 1},
        {{&LineCap_names[7], 8}, 0},
        {{&LineCap_names[15], 9}, 2},
};

static const int LineCap_entries_by_number[] = {
    1,  // 0 -> ROUNDCAP
    0,  // 1 -> BUTTCAP
    2,  // 2 -> SQUARECAP
};

const std::string& LineCap_Name(LineCap value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          LineCap_entries, LineCap_entries_by_number,
          3, LineCap_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      LineCap_entries, LineCap_entries_by_number, 3,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : LineCap_strings[idx].get();
}

bool LineCap_Parse(absl::string_view name, LineCap* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      LineCap_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<LineCap>(int_value);
  }
  return success;
}
// ===================================================================

class DashDotProto::_Internal {
 public:
};

DashDotProto::DashDotProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DashDotProto)
}
inline PROTOBUF_NDEBUG_INLINE DashDotProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::DashDotProto& from_msg)
      : dd_{visibility, arena, from.dd_},
        _cached_size_{0} {}

DashDotProto::DashDotProto(
    ::google::protobuf::Arena* arena,
    const DashDotProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DashDotProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.offset_ = from._impl_.offset_;

  // @@protoc_insertion_point(copy_constructor:DashDotProto)
}
inline PROTOBUF_NDEBUG_INLINE DashDotProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : dd_{visibility, arena},
        _cached_size_{0} {}

inline void DashDotProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.offset_ = {};
}
DashDotProto::~DashDotProto() {
  // @@protoc_insertion_point(destructor:DashDotProto)
  SharedDtor(*this);
}
inline void DashDotProto::SharedDtor(MessageLite& self) {
  DashDotProto& this_ = static_cast<DashDotProto&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* DashDotProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DashDotProto(arena);
}
constexpr auto DashDotProto::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DashDotProto, _impl_.dd_) +
          decltype(DashDotProto::_impl_.dd_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(DashDotProto), alignof(DashDotProto), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DashDotProto::PlacementNew_,
                                 sizeof(DashDotProto),
                                 alignof(DashDotProto));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<13> DashDotProto::_class_data_ = {
    {
        &_DashDotProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DashDotProto::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<DashDotProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DashDotProto::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<DashDotProto>(), &DashDotProto::ByteSizeLong,
            &DashDotProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DashDotProto, _impl_._cached_size_),
        true,
    },
    "DashDotProto",
};
const ::google::protobuf::internal::ClassData* DashDotProto::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> DashDotProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::DashDotProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double offset = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(DashDotProto, _impl_.offset_)}},
    // repeated double dd = 1;
    {::_pbi::TcParser::FastF64P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DashDotProto, _impl_.dd_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated double dd = 1;
    {PROTOBUF_FIELD_OFFSET(DashDotProto, _impl_.dd_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // double offset = 2;
    {PROTOBUF_FIELD_OFFSET(DashDotProto, _impl_.offset_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void DashDotProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DashDotProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dd_.Clear();
  _impl_.offset_ = 0;
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DashDotProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DashDotProto& this_ = static_cast<const DashDotProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DashDotProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DashDotProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:DashDotProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated double dd = 1;
          if (this_._internal_dd_size() > 0) {
            target = stream->WriteFixedPacked(1, this_._internal_dd(), target);
          }

          // double offset = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_offset()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_offset(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:DashDotProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DashDotProto::ByteSizeLong(const MessageLite& base) {
          const DashDotProto& this_ = static_cast<const DashDotProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DashDotProto::ByteSizeLong() const {
          const DashDotProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:DashDotProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated double dd = 1;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_dd_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
           {
            // double offset = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_offset()) != 0) {
              total_size += 9;
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void DashDotProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DashDotProto*>(&to_msg);
  auto& from = static_cast<const DashDotProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DashDotProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_dd()->MergeFrom(from._internal_dd());
  if (::absl::bit_cast<::uint64_t>(from._internal_offset()) != 0) {
    _this->_impl_.offset_ = from._impl_.offset_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DashDotProto::CopyFrom(const DashDotProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DashDotProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DashDotProto::InternalSwap(DashDotProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dd_.InternalSwap(&other->_impl_.dd_);
        swap(_impl_.offset_, other->_impl_.offset_);
}

// ===================================================================

class PathSymProto::_Internal {
 public:
};

PathSymProto::PathSymProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:PathSymProto)
}
inline PROTOBUF_NDEBUG_INLINE PathSymProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::PathSymProto& from_msg)
      : name_(arena, from.name_),
        _cached_size_{0} {}

PathSymProto::PathSymProto(
    ::google::protobuf::Arena* arena,
    const PathSymProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PathSymProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, step_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, step_),
           offsetof(Impl_, offset_) -
               offsetof(Impl_, step_) +
               sizeof(Impl_::offset_));

  // @@protoc_insertion_point(copy_constructor:PathSymProto)
}
inline PROTOBUF_NDEBUG_INLINE PathSymProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : name_(arena),
        _cached_size_{0} {}

inline void PathSymProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, step_),
           0,
           offsetof(Impl_, offset_) -
               offsetof(Impl_, step_) +
               sizeof(Impl_::offset_));
}
PathSymProto::~PathSymProto() {
  // @@protoc_insertion_point(destructor:PathSymProto)
  SharedDtor(*this);
}
inline void PathSymProto::SharedDtor(MessageLite& self) {
  PathSymProto& this_ = static_cast<PathSymProto&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PathSymProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PathSymProto(arena);
}
constexpr auto PathSymProto::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PathSymProto),
                                            alignof(PathSymProto));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<13> PathSymProto::_class_data_ = {
    {
        &_PathSymProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PathSymProto::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<PathSymProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PathSymProto::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<PathSymProto>(), &PathSymProto::ByteSizeLong,
            &PathSymProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PathSymProto, _impl_._cached_size_),
        true,
    },
    "PathSymProto",
};
const ::google::protobuf::internal::ClassData* PathSymProto::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 25, 2> PathSymProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::PathSymProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PathSymProto, _impl_.name_)}},
    // double step = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(PathSymProto, _impl_.step_)}},
    // double offset = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(PathSymProto, _impl_.offset_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(PathSymProto, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double step = 2;
    {PROTOBUF_FIELD_OFFSET(PathSymProto, _impl_.step_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double offset = 3;
    {PROTOBUF_FIELD_OFFSET(PathSymProto, _impl_.offset_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\14\4\0\0\0\0\0\0"
    "PathSymProto"
    "name"
  }},
};

PROTOBUF_NOINLINE void PathSymProto::Clear() {
// @@protoc_insertion_point(message_clear_start:PathSymProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.step_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.offset_) -
      reinterpret_cast<char*>(&_impl_.step_)) + sizeof(_impl_.offset_));
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PathSymProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PathSymProto& this_ = static_cast<const PathSymProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PathSymProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PathSymProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:PathSymProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "PathSymProto.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // double step = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_step()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_step(), target);
          }

          // double offset = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_offset()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_offset(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:PathSymProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PathSymProto::ByteSizeLong(const MessageLite& base) {
          const PathSymProto& this_ = static_cast<const PathSymProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PathSymProto::ByteSizeLong() const {
          const PathSymProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:PathSymProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string name = 1;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // double step = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_step()) != 0) {
              total_size += 9;
            }
            // double offset = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_offset()) != 0) {
              total_size += 9;
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void PathSymProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PathSymProto*>(&to_msg);
  auto& from = static_cast<const PathSymProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PathSymProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_step()) != 0) {
    _this->_impl_.step_ = from._impl_.step_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_offset()) != 0) {
    _this->_impl_.offset_ = from._impl_.offset_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PathSymProto::CopyFrom(const PathSymProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PathSymProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PathSymProto::InternalSwap(PathSymProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathSymProto, _impl_.offset_)
      + sizeof(PathSymProto::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(PathSymProto, _impl_.step_)>(
          reinterpret_cast<char*>(&_impl_.step_),
          reinterpret_cast<char*>(&other->_impl_.step_));
}

// ===================================================================

class LineRuleProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<LineRuleProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_._has_bits_);
};

LineRuleProto::LineRuleProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:LineRuleProto)
}
inline PROTOBUF_NDEBUG_INLINE LineRuleProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::LineRuleProto& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LineRuleProto::LineRuleProto(
    ::google::protobuf::Arena* arena,
    const LineRuleProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LineRuleProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.dashdot_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::MessageLite::CopyConstruct<::DashDotProto>(
                              arena, *from._impl_.dashdot_)
                        : nullptr;
  _impl_.pathsym_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::MessageLite::CopyConstruct<::PathSymProto>(
                              arena, *from._impl_.pathsym_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, width_),
           offsetof(Impl_, cap_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::cap_));

  // @@protoc_insertion_point(copy_constructor:LineRuleProto)
}
inline PROTOBUF_NDEBUG_INLINE LineRuleProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LineRuleProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, dashdot_),
           0,
           offsetof(Impl_, cap_) -
               offsetof(Impl_, dashdot_) +
               sizeof(Impl_::cap_));
}
LineRuleProto::~LineRuleProto() {
  // @@protoc_insertion_point(destructor:LineRuleProto)
  SharedDtor(*this);
}
inline void LineRuleProto::SharedDtor(MessageLite& self) {
  LineRuleProto& this_ = static_cast<LineRuleProto&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.dashdot_;
  delete this_._impl_.pathsym_;
  this_._impl_.~Impl_();
}

inline void* LineRuleProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LineRuleProto(arena);
}
constexpr auto LineRuleProto::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(LineRuleProto),
                                            alignof(LineRuleProto));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<14> LineRuleProto::_class_data_ = {
    {
        &_LineRuleProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &LineRuleProto::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<LineRuleProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LineRuleProto::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<LineRuleProto>(), &LineRuleProto::ByteSizeLong,
            &LineRuleProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_._cached_size_),
        true,
    },
    "LineRuleProto",
};
const ::google::protobuf::internal::ClassData* LineRuleProto::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 0, 2> LineRuleProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::LineRuleProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double width = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_.width_)}},
    // uint32 color = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_.color_)}},
    // .DashDotProto dashdot = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_.dashdot_)}},
    // int32 priority = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_.priority_)}},
    // .PathSymProto pathsym = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_.pathsym_)}},
    // .LineJoin join = 6;
    {::_pbi::TcParser::FastV32S1,
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_.join_)}},
    // .LineCap cap = 7;
    {::_pbi::TcParser::FastV32S1,
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_.cap_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double width = 1;
    {PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_.width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // uint32 color = 2;
    {PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_.color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .DashDotProto dashdot = 3;
    {PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_.dashdot_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 priority = 4;
    {PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_.priority_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .PathSymProto pathsym = 5;
    {PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_.pathsym_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .LineJoin join = 6;
    {PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_.join_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .LineCap cap = 7;
    {PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_.cap_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::DashDotProto>()},
    {::_pbi::TcParser::GetTable<::PathSymProto>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void LineRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:LineRuleProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.dashdot_ != nullptr);
      _impl_.dashdot_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.pathsym_ != nullptr);
      _impl_.pathsym_->Clear();
    }
  }
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cap_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.cap_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LineRuleProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LineRuleProto& this_ = static_cast<const LineRuleProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LineRuleProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LineRuleProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:LineRuleProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double width = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_width()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_width(), target);
          }

          // uint32 color = 2;
          if (this_._internal_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_color(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .DashDotProto dashdot = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.dashdot_, this_._impl_.dashdot_->GetCachedSize(), target,
                stream);
          }

          // int32 priority = 4;
          if (this_._internal_priority() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_priority(), target);
          }

          // .PathSymProto pathsym = 5;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.pathsym_, this_._impl_.pathsym_->GetCachedSize(), target,
                stream);
          }

          // .LineJoin join = 6;
          if (this_._internal_join() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_join(), target);
          }

          // .LineCap cap = 7;
          if (this_._internal_cap() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                7, this_._internal_cap(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:LineRuleProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LineRuleProto::ByteSizeLong(const MessageLite& base) {
          const LineRuleProto& this_ = static_cast<const LineRuleProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LineRuleProto::ByteSizeLong() const {
          const LineRuleProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:LineRuleProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .DashDotProto dashdot = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dashdot_);
            }
            // .PathSymProto pathsym = 5;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pathsym_);
            }
          }
           {
            // double width = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_width()) != 0) {
              total_size += 9;
            }
            // uint32 color = 2;
            if (this_._internal_color() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_color());
            }
            // int32 priority = 4;
            if (this_._internal_priority() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_priority());
            }
            // .LineJoin join = 6;
            if (this_._internal_join() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_join());
            }
            // .LineCap cap = 7;
            if (this_._internal_cap() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_cap());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void LineRuleProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LineRuleProto*>(&to_msg);
  auto& from = static_cast<const LineRuleProto&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:LineRuleProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.dashdot_ != nullptr);
      if (_this->_impl_.dashdot_ == nullptr) {
        _this->_impl_.dashdot_ =
            ::google::protobuf::MessageLite::CopyConstruct<::DashDotProto>(arena, *from._impl_.dashdot_);
      } else {
        _this->_impl_.dashdot_->MergeFrom(*from._impl_.dashdot_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.pathsym_ != nullptr);
      if (_this->_impl_.pathsym_ == nullptr) {
        _this->_impl_.pathsym_ =
            ::google::protobuf::MessageLite::CopyConstruct<::PathSymProto>(arena, *from._impl_.pathsym_);
      } else {
        _this->_impl_.pathsym_->MergeFrom(*from._impl_.pathsym_);
      }
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_width()) != 0) {
    _this->_impl_.width_ = from._impl_.width_;
  }
  if (from._internal_color() != 0) {
    _this->_impl_.color_ = from._impl_.color_;
  }
  if (from._internal_priority() != 0) {
    _this->_impl_.priority_ = from._impl_.priority_;
  }
  if (from._internal_join() != 0) {
    _this->_impl_.join_ = from._impl_.join_;
  }
  if (from._internal_cap() != 0) {
    _this->_impl_.cap_ = from._impl_.cap_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LineRuleProto::CopyFrom(const LineRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LineRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LineRuleProto::InternalSwap(LineRuleProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_.cap_)
      + sizeof(LineRuleProto::_impl_.cap_)
      - PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_.dashdot_)>(
          reinterpret_cast<char*>(&_impl_.dashdot_),
          reinterpret_cast<char*>(&other->_impl_.dashdot_));
}

// ===================================================================

class LineDefProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<LineDefProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_._has_bits_);
};

LineDefProto::LineDefProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:LineDefProto)
}
inline PROTOBUF_NDEBUG_INLINE LineDefProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::LineDefProto& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LineDefProto::LineDefProto(
    ::google::protobuf::Arena* arena,
    const LineDefProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LineDefProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.dashdot_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::MessageLite::CopyConstruct<::DashDotProto>(
                              arena, *from._impl_.dashdot_)
                        : nullptr;
  _impl_.pathsym_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::MessageLite::CopyConstruct<::PathSymProto>(
                              arena, *from._impl_.pathsym_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, width_),
           offsetof(Impl_, cap_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::cap_));

  // @@protoc_insertion_point(copy_constructor:LineDefProto)
}
inline PROTOBUF_NDEBUG_INLINE LineDefProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LineDefProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, dashdot_),
           0,
           offsetof(Impl_, cap_) -
               offsetof(Impl_, dashdot_) +
               sizeof(Impl_::cap_));
}
LineDefProto::~LineDefProto() {
  // @@protoc_insertion_point(destructor:LineDefProto)
  SharedDtor(*this);
}
inline void LineDefProto::SharedDtor(MessageLite& self) {
  LineDefProto& this_ = static_cast<LineDefProto&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.dashdot_;
  delete this_._impl_.pathsym_;
  this_._impl_.~Impl_();
}

inline void* LineDefProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LineDefProto(arena);
}
constexpr auto LineDefProto::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(LineDefProto),
                                            alignof(LineDefProto));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<13> LineDefProto::_class_data_ = {
    {
        &_LineDefProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &LineDefProto::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<LineDefProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LineDefProto::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<LineDefProto>(), &LineDefProto::ByteSizeLong,
            &LineDefProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_._cached_size_),
        true,
    },
    "LineDefProto",
};
const ::google::protobuf::internal::ClassData* LineDefProto::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 0, 2> LineDefProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967184,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::LineDefProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double width = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_.width_)}},
    // uint32 color = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_.color_)}},
    // .DashDotProto dashdot = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_.dashdot_)}},
    // .PathSymProto pathsym = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_.pathsym_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .LineJoin join = 6;
    {::_pbi::TcParser::FastV32S1,
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_.join_)}},
    // .LineCap cap = 7;
    {::_pbi::TcParser::FastV32S1,
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_.cap_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double width = 1;
    {PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_.width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // uint32 color = 2;
    {PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_.color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .DashDotProto dashdot = 3;
    {PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_.dashdot_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .PathSymProto pathsym = 4;
    {PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_.pathsym_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .LineJoin join = 6;
    {PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_.join_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .LineCap cap = 7;
    {PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_.cap_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::DashDotProto>()},
    {::_pbi::TcParser::GetTable<::PathSymProto>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void LineDefProto::Clear() {
// @@protoc_insertion_point(message_clear_start:LineDefProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.dashdot_ != nullptr);
      _impl_.dashdot_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.pathsym_ != nullptr);
      _impl_.pathsym_->Clear();
    }
  }
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cap_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.cap_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LineDefProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LineDefProto& this_ = static_cast<const LineDefProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LineDefProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LineDefProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:LineDefProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double width = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_width()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_width(), target);
          }

          // uint32 color = 2;
          if (this_._internal_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_color(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .DashDotProto dashdot = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.dashdot_, this_._impl_.dashdot_->GetCachedSize(), target,
                stream);
          }

          // .PathSymProto pathsym = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.pathsym_, this_._impl_.pathsym_->GetCachedSize(), target,
                stream);
          }

          // .LineJoin join = 6;
          if (this_._internal_join() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_join(), target);
          }

          // .LineCap cap = 7;
          if (this_._internal_cap() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                7, this_._internal_cap(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:LineDefProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LineDefProto::ByteSizeLong(const MessageLite& base) {
          const LineDefProto& this_ = static_cast<const LineDefProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LineDefProto::ByteSizeLong() const {
          const LineDefProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:LineDefProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .DashDotProto dashdot = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dashdot_);
            }
            // .PathSymProto pathsym = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pathsym_);
            }
          }
           {
            // double width = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_width()) != 0) {
              total_size += 9;
            }
            // uint32 color = 2;
            if (this_._internal_color() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_color());
            }
            // .LineJoin join = 6;
            if (this_._internal_join() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_join());
            }
            // .LineCap cap = 7;
            if (this_._internal_cap() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_cap());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void LineDefProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LineDefProto*>(&to_msg);
  auto& from = static_cast<const LineDefProto&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:LineDefProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.dashdot_ != nullptr);
      if (_this->_impl_.dashdot_ == nullptr) {
        _this->_impl_.dashdot_ =
            ::google::protobuf::MessageLite::CopyConstruct<::DashDotProto>(arena, *from._impl_.dashdot_);
      } else {
        _this->_impl_.dashdot_->MergeFrom(*from._impl_.dashdot_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.pathsym_ != nullptr);
      if (_this->_impl_.pathsym_ == nullptr) {
        _this->_impl_.pathsym_ =
            ::google::protobuf::MessageLite::CopyConstruct<::PathSymProto>(arena, *from._impl_.pathsym_);
      } else {
        _this->_impl_.pathsym_->MergeFrom(*from._impl_.pathsym_);
      }
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_width()) != 0) {
    _this->_impl_.width_ = from._impl_.width_;
  }
  if (from._internal_color() != 0) {
    _this->_impl_.color_ = from._impl_.color_;
  }
  if (from._internal_join() != 0) {
    _this->_impl_.join_ = from._impl_.join_;
  }
  if (from._internal_cap() != 0) {
    _this->_impl_.cap_ = from._impl_.cap_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LineDefProto::CopyFrom(const LineDefProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LineDefProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LineDefProto::InternalSwap(LineDefProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_.cap_)
      + sizeof(LineDefProto::_impl_.cap_)
      - PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_.dashdot_)>(
          reinterpret_cast<char*>(&_impl_.dashdot_),
          reinterpret_cast<char*>(&other->_impl_.dashdot_));
}

// ===================================================================

class AreaRuleProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AreaRuleProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AreaRuleProto, _impl_._has_bits_);
};

AreaRuleProto::AreaRuleProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:AreaRuleProto)
}
inline PROTOBUF_NDEBUG_INLINE AreaRuleProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::AreaRuleProto& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AreaRuleProto::AreaRuleProto(
    ::google::protobuf::Arena* arena,
    const AreaRuleProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AreaRuleProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.border_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::MessageLite::CopyConstruct<::LineDefProto>(
                              arena, *from._impl_.border_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, color_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, color_),
           offsetof(Impl_, priority_) -
               offsetof(Impl_, color_) +
               sizeof(Impl_::priority_));

  // @@protoc_insertion_point(copy_constructor:AreaRuleProto)
}
inline PROTOBUF_NDEBUG_INLINE AreaRuleProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AreaRuleProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, border_),
           0,
           offsetof(Impl_, priority_) -
               offsetof(Impl_, border_) +
               sizeof(Impl_::priority_));
}
AreaRuleProto::~AreaRuleProto() {
  // @@protoc_insertion_point(destructor:AreaRuleProto)
  SharedDtor(*this);
}
inline void AreaRuleProto::SharedDtor(MessageLite& self) {
  AreaRuleProto& this_ = static_cast<AreaRuleProto&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.border_;
  this_._impl_.~Impl_();
}

inline void* AreaRuleProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AreaRuleProto(arena);
}
constexpr auto AreaRuleProto::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(AreaRuleProto),
                                            alignof(AreaRuleProto));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<14> AreaRuleProto::_class_data_ = {
    {
        &_AreaRuleProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AreaRuleProto::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<AreaRuleProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AreaRuleProto::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<AreaRuleProto>(), &AreaRuleProto::ByteSizeLong,
            &AreaRuleProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AreaRuleProto, _impl_._cached_size_),
        true,
    },
    "AreaRuleProto",
};
const ::google::protobuf::internal::ClassData* AreaRuleProto::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> AreaRuleProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AreaRuleProto, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::AreaRuleProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 color = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AreaRuleProto, _impl_.color_)}},
    // .LineDefProto border = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AreaRuleProto, _impl_.border_)}},
    // int32 priority = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(AreaRuleProto, _impl_.priority_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 color = 1;
    {PROTOBUF_FIELD_OFFSET(AreaRuleProto, _impl_.color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .LineDefProto border = 2;
    {PROTOBUF_FIELD_OFFSET(AreaRuleProto, _impl_.border_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 priority = 3;
    {PROTOBUF_FIELD_OFFSET(AreaRuleProto, _impl_.priority_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::LineDefProto>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void AreaRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:AreaRuleProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.border_ != nullptr);
    _impl_.border_->Clear();
  }
  ::memset(&_impl_.color_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.priority_) -
      reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.priority_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AreaRuleProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AreaRuleProto& this_ = static_cast<const AreaRuleProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AreaRuleProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AreaRuleProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:AreaRuleProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 color = 1;
          if (this_._internal_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_color(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .LineDefProto border = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.border_, this_._impl_.border_->GetCachedSize(), target,
                stream);
          }

          // int32 priority = 3;
          if (this_._internal_priority() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_priority(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:AreaRuleProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AreaRuleProto::ByteSizeLong(const MessageLite& base) {
          const AreaRuleProto& this_ = static_cast<const AreaRuleProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AreaRuleProto::ByteSizeLong() const {
          const AreaRuleProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:AreaRuleProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .LineDefProto border = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.border_);
            }
          }
           {
            // uint32 color = 1;
            if (this_._internal_color() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_color());
            }
            // int32 priority = 3;
            if (this_._internal_priority() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_priority());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void AreaRuleProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AreaRuleProto*>(&to_msg);
  auto& from = static_cast<const AreaRuleProto&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:AreaRuleProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.border_ != nullptr);
    if (_this->_impl_.border_ == nullptr) {
      _this->_impl_.border_ =
          ::google::protobuf::MessageLite::CopyConstruct<::LineDefProto>(arena, *from._impl_.border_);
    } else {
      _this->_impl_.border_->MergeFrom(*from._impl_.border_);
    }
  }
  if (from._internal_color() != 0) {
    _this->_impl_.color_ = from._impl_.color_;
  }
  if (from._internal_priority() != 0) {
    _this->_impl_.priority_ = from._impl_.priority_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AreaRuleProto::CopyFrom(const AreaRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AreaRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AreaRuleProto::InternalSwap(AreaRuleProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AreaRuleProto, _impl_.priority_)
      + sizeof(AreaRuleProto::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(AreaRuleProto, _impl_.border_)>(
          reinterpret_cast<char*>(&_impl_.border_),
          reinterpret_cast<char*>(&other->_impl_.border_));
}

// ===================================================================

class SymbolRuleProto::_Internal {
 public:
};

SymbolRuleProto::SymbolRuleProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SymbolRuleProto)
}
inline PROTOBUF_NDEBUG_INLINE SymbolRuleProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::SymbolRuleProto& from_msg)
      : name_(arena, from.name_),
        _cached_size_{0} {}

SymbolRuleProto::SymbolRuleProto(
    ::google::protobuf::Arena* arena,
    const SymbolRuleProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SymbolRuleProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, apply_for_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, apply_for_type_),
           offsetof(Impl_, min_distance_) -
               offsetof(Impl_, apply_for_type_) +
               sizeof(Impl_::min_distance_));

  // @@protoc_insertion_point(copy_constructor:SymbolRuleProto)
}
inline PROTOBUF_NDEBUG_INLINE SymbolRuleProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : name_(arena),
        _cached_size_{0} {}

inline void SymbolRuleProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, apply_for_type_),
           0,
           offsetof(Impl_, min_distance_) -
               offsetof(Impl_, apply_for_type_) +
               sizeof(Impl_::min_distance_));
}
SymbolRuleProto::~SymbolRuleProto() {
  // @@protoc_insertion_point(destructor:SymbolRuleProto)
  SharedDtor(*this);
}
inline void SymbolRuleProto::SharedDtor(MessageLite& self) {
  SymbolRuleProto& this_ = static_cast<SymbolRuleProto&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* SymbolRuleProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SymbolRuleProto(arena);
}
constexpr auto SymbolRuleProto::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SymbolRuleProto),
                                            alignof(SymbolRuleProto));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<16> SymbolRuleProto::_class_data_ = {
    {
        &_SymbolRuleProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SymbolRuleProto::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<SymbolRuleProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SymbolRuleProto::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<SymbolRuleProto>(), &SymbolRuleProto::ByteSizeLong,
            &SymbolRuleProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SymbolRuleProto, _impl_._cached_size_),
        true,
    },
    "SymbolRuleProto",
};
const ::google::protobuf::internal::ClassData* SymbolRuleProto::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 28, 2> SymbolRuleProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::SymbolRuleProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 min_distance = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(SymbolRuleProto, _impl_.min_distance_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SymbolRuleProto, _impl_.name_)}},
    // int32 apply_for_type = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SymbolRuleProto, _impl_.apply_for_type_)}},
    // int32 priority = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SymbolRuleProto, _impl_.priority_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(SymbolRuleProto, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 apply_for_type = 2;
    {PROTOBUF_FIELD_OFFSET(SymbolRuleProto, _impl_.apply_for_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 priority = 3;
    {PROTOBUF_FIELD_OFFSET(SymbolRuleProto, _impl_.priority_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 min_distance = 4;
    {PROTOBUF_FIELD_OFFSET(SymbolRuleProto, _impl_.min_distance_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\17\4\0\0\0\0\0\0"
    "SymbolRuleProto"
    "name"
  }},
};

PROTOBUF_NOINLINE void SymbolRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:SymbolRuleProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.apply_for_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.min_distance_) -
      reinterpret_cast<char*>(&_impl_.apply_for_type_)) + sizeof(_impl_.min_distance_));
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SymbolRuleProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SymbolRuleProto& this_ = static_cast<const SymbolRuleProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SymbolRuleProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SymbolRuleProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:SymbolRuleProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "SymbolRuleProto.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // int32 apply_for_type = 2;
          if (this_._internal_apply_for_type() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_apply_for_type(), target);
          }

          // int32 priority = 3;
          if (this_._internal_priority() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_priority(), target);
          }

          // int32 min_distance = 4;
          if (this_._internal_min_distance() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_min_distance(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:SymbolRuleProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SymbolRuleProto::ByteSizeLong(const MessageLite& base) {
          const SymbolRuleProto& this_ = static_cast<const SymbolRuleProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SymbolRuleProto::ByteSizeLong() const {
          const SymbolRuleProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:SymbolRuleProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string name = 1;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // int32 apply_for_type = 2;
            if (this_._internal_apply_for_type() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_apply_for_type());
            }
            // int32 priority = 3;
            if (this_._internal_priority() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_priority());
            }
            // int32 min_distance = 4;
            if (this_._internal_min_distance() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_min_distance());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void SymbolRuleProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SymbolRuleProto*>(&to_msg);
  auto& from = static_cast<const SymbolRuleProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SymbolRuleProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_apply_for_type() != 0) {
    _this->_impl_.apply_for_type_ = from._impl_.apply_for_type_;
  }
  if (from._internal_priority() != 0) {
    _this->_impl_.priority_ = from._impl_.priority_;
  }
  if (from._internal_min_distance() != 0) {
    _this->_impl_.min_distance_ = from._impl_.min_distance_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SymbolRuleProto::CopyFrom(const SymbolRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SymbolRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SymbolRuleProto::InternalSwap(SymbolRuleProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SymbolRuleProto, _impl_.min_distance_)
      + sizeof(SymbolRuleProto::_impl_.min_distance_)
      - PROTOBUF_FIELD_OFFSET(SymbolRuleProto, _impl_.apply_for_type_)>(
          reinterpret_cast<char*>(&_impl_.apply_for_type_),
          reinterpret_cast<char*>(&other->_impl_.apply_for_type_));
}

// ===================================================================

class CaptionDefProto::_Internal {
 public:
};

CaptionDefProto::CaptionDefProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CaptionDefProto)
}
inline PROTOBUF_NDEBUG_INLINE CaptionDefProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CaptionDefProto& from_msg)
      : text_(arena, from.text_),
        _cached_size_{0} {}

CaptionDefProto::CaptionDefProto(
    ::google::protobuf::Arena* arena,
    const CaptionDefProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CaptionDefProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, height_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, height_),
           offsetof(Impl_, is_optional_) -
               offsetof(Impl_, height_) +
               sizeof(Impl_::is_optional_));

  // @@protoc_insertion_point(copy_constructor:CaptionDefProto)
}
inline PROTOBUF_NDEBUG_INLINE CaptionDefProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : text_(arena),
        _cached_size_{0} {}

inline void CaptionDefProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, height_),
           0,
           offsetof(Impl_, is_optional_) -
               offsetof(Impl_, height_) +
               sizeof(Impl_::is_optional_));
}
CaptionDefProto::~CaptionDefProto() {
  // @@protoc_insertion_point(destructor:CaptionDefProto)
  SharedDtor(*this);
}
inline void CaptionDefProto::SharedDtor(MessageLite& self) {
  CaptionDefProto& this_ = static_cast<CaptionDefProto&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.text_.Destroy();
  this_._impl_.~Impl_();
}

inline void* CaptionDefProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CaptionDefProto(arena);
}
constexpr auto CaptionDefProto::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CaptionDefProto),
                                            alignof(CaptionDefProto));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<16> CaptionDefProto::_class_data_ = {
    {
        &_CaptionDefProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CaptionDefProto::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<CaptionDefProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CaptionDefProto::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<CaptionDefProto>(), &CaptionDefProto::ByteSizeLong,
            &CaptionDefProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CaptionDefProto, _impl_._cached_size_),
        true,
    },
    "CaptionDefProto",
};
const ::google::protobuf::internal::ClassData* CaptionDefProto::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 28, 2> CaptionDefProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CaptionDefProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 height = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CaptionDefProto, _impl_.height_)}},
    // uint32 color = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CaptionDefProto, _impl_.color_)}},
    // uint32 stroke_color = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(CaptionDefProto, _impl_.stroke_color_)}},
    // int32 offset_x = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(CaptionDefProto, _impl_.offset_x_)}},
    // int32 offset_y = 5;
    {::_pbi::TcParser::FastV32S1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(CaptionDefProto, _impl_.offset_y_)}},
    // string text = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(CaptionDefProto, _impl_.text_)}},
    // bool is_optional = 7;
    {::_pbi::TcParser::FastV8S1,
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(CaptionDefProto, _impl_.is_optional_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 height = 1;
    {PROTOBUF_FIELD_OFFSET(CaptionDefProto, _impl_.height_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // uint32 color = 2;
    {PROTOBUF_FIELD_OFFSET(CaptionDefProto, _impl_.color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 stroke_color = 3;
    {PROTOBUF_FIELD_OFFSET(CaptionDefProto, _impl_.stroke_color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // int32 offset_x = 4;
    {PROTOBUF_FIELD_OFFSET(CaptionDefProto, _impl_.offset_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 offset_y = 5;
    {PROTOBUF_FIELD_OFFSET(CaptionDefProto, _impl_.offset_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string text = 6;
    {PROTOBUF_FIELD_OFFSET(CaptionDefProto, _impl_.text_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool is_optional = 7;
    {PROTOBUF_FIELD_OFFSET(CaptionDefProto, _impl_.is_optional_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\17\0\0\0\0\0\4\0"
    "CaptionDefProto"
    "text"
  }},
};

PROTOBUF_NOINLINE void CaptionDefProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CaptionDefProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_optional_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.is_optional_));
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CaptionDefProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CaptionDefProto& this_ = static_cast<const CaptionDefProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CaptionDefProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CaptionDefProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:CaptionDefProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 height = 1;
          if (this_._internal_height() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_height(), target);
          }

          // uint32 color = 2;
          if (this_._internal_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_color(), target);
          }

          // uint32 stroke_color = 3;
          if (this_._internal_stroke_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_stroke_color(), target);
          }

          // int32 offset_x = 4;
          if (this_._internal_offset_x() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_offset_x(), target);
          }

          // int32 offset_y = 5;
          if (this_._internal_offset_y() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_offset_y(), target);
          }

          // string text = 6;
          if (!this_._internal_text().empty()) {
            const std::string& _s = this_._internal_text();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "CaptionDefProto.text");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // bool is_optional = 7;
          if (this_._internal_is_optional() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                7, this_._internal_is_optional(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:CaptionDefProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CaptionDefProto::ByteSizeLong(const MessageLite& base) {
          const CaptionDefProto& this_ = static_cast<const CaptionDefProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CaptionDefProto::ByteSizeLong() const {
          const CaptionDefProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:CaptionDefProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string text = 6;
            if (!this_._internal_text().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_text());
            }
            // int32 height = 1;
            if (this_._internal_height() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_height());
            }
            // uint32 color = 2;
            if (this_._internal_color() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_color());
            }
            // uint32 stroke_color = 3;
            if (this_._internal_stroke_color() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_stroke_color());
            }
            // int32 offset_x = 4;
            if (this_._internal_offset_x() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_offset_x());
            }
            // int32 offset_y = 5;
            if (this_._internal_offset_y() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_offset_y());
            }
            // bool is_optional = 7;
            if (this_._internal_is_optional() != 0) {
              total_size += 2;
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void CaptionDefProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CaptionDefProto*>(&to_msg);
  auto& from = static_cast<const CaptionDefProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CaptionDefProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_height() != 0) {
    _this->_impl_.height_ = from._impl_.height_;
  }
  if (from._internal_color() != 0) {
    _this->_impl_.color_ = from._impl_.color_;
  }
  if (from._internal_stroke_color() != 0) {
    _this->_impl_.stroke_color_ = from._impl_.stroke_color_;
  }
  if (from._internal_offset_x() != 0) {
    _this->_impl_.offset_x_ = from._impl_.offset_x_;
  }
  if (from._internal_offset_y() != 0) {
    _this->_impl_.offset_y_ = from._impl_.offset_y_;
  }
  if (from._internal_is_optional() != 0) {
    _this->_impl_.is_optional_ = from._impl_.is_optional_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CaptionDefProto::CopyFrom(const CaptionDefProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CaptionDefProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CaptionDefProto::InternalSwap(CaptionDefProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, &other->_impl_.text_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CaptionDefProto, _impl_.is_optional_)
      + sizeof(CaptionDefProto::_impl_.is_optional_)
      - PROTOBUF_FIELD_OFFSET(CaptionDefProto, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

// ===================================================================

class CaptionRuleProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CaptionRuleProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CaptionRuleProto, _impl_._has_bits_);
};

CaptionRuleProto::CaptionRuleProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CaptionRuleProto)
}
inline PROTOBUF_NDEBUG_INLINE CaptionRuleProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CaptionRuleProto& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CaptionRuleProto::CaptionRuleProto(
    ::google::protobuf::Arena* arena,
    const CaptionRuleProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CaptionRuleProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.primary_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::MessageLite::CopyConstruct<::CaptionDefProto>(
                              arena, *from._impl_.primary_)
                        : nullptr;
  _impl_.secondary_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::MessageLite::CopyConstruct<::CaptionDefProto>(
                              arena, *from._impl_.secondary_)
                        : nullptr;
  _impl_.priority_ = from._impl_.priority_;

  // @@protoc_insertion_point(copy_constructor:CaptionRuleProto)
}
inline PROTOBUF_NDEBUG_INLINE CaptionRuleProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CaptionRuleProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, primary_),
           0,
           offsetof(Impl_, priority_) -
               offsetof(Impl_, primary_) +
               sizeof(Impl_::priority_));
}
CaptionRuleProto::~CaptionRuleProto() {
  // @@protoc_insertion_point(destructor:CaptionRuleProto)
  SharedDtor(*this);
}
inline void CaptionRuleProto::SharedDtor(MessageLite& self) {
  CaptionRuleProto& this_ = static_cast<CaptionRuleProto&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.primary_;
  delete this_._impl_.secondary_;
  this_._impl_.~Impl_();
}

inline void* CaptionRuleProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CaptionRuleProto(arena);
}
constexpr auto CaptionRuleProto::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CaptionRuleProto),
                                            alignof(CaptionRuleProto));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<17> CaptionRuleProto::_class_data_ = {
    {
        &_CaptionRuleProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CaptionRuleProto::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<CaptionRuleProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CaptionRuleProto::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<CaptionRuleProto>(), &CaptionRuleProto::ByteSizeLong,
            &CaptionRuleProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CaptionRuleProto, _impl_._cached_size_),
        true,
    },
    "CaptionRuleProto",
};
const ::google::protobuf::internal::ClassData* CaptionRuleProto::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> CaptionRuleProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CaptionRuleProto, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CaptionRuleProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .CaptionDefProto primary = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CaptionRuleProto, _impl_.primary_)}},
    // .CaptionDefProto secondary = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CaptionRuleProto, _impl_.secondary_)}},
    // int32 priority = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(CaptionRuleProto, _impl_.priority_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .CaptionDefProto primary = 1;
    {PROTOBUF_FIELD_OFFSET(CaptionRuleProto, _impl_.primary_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .CaptionDefProto secondary = 2;
    {PROTOBUF_FIELD_OFFSET(CaptionRuleProto, _impl_.secondary_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 priority = 3;
    {PROTOBUF_FIELD_OFFSET(CaptionRuleProto, _impl_.priority_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CaptionDefProto>()},
    {::_pbi::TcParser::GetTable<::CaptionDefProto>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CaptionRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CaptionRuleProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.primary_ != nullptr);
      _impl_.primary_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.secondary_ != nullptr);
      _impl_.secondary_->Clear();
    }
  }
  _impl_.priority_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CaptionRuleProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CaptionRuleProto& this_ = static_cast<const CaptionRuleProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CaptionRuleProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CaptionRuleProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:CaptionRuleProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .CaptionDefProto primary = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.primary_, this_._impl_.primary_->GetCachedSize(), target,
                stream);
          }

          // .CaptionDefProto secondary = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.secondary_, this_._impl_.secondary_->GetCachedSize(), target,
                stream);
          }

          // int32 priority = 3;
          if (this_._internal_priority() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_priority(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:CaptionRuleProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CaptionRuleProto::ByteSizeLong(const MessageLite& base) {
          const CaptionRuleProto& this_ = static_cast<const CaptionRuleProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CaptionRuleProto::ByteSizeLong() const {
          const CaptionRuleProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:CaptionRuleProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .CaptionDefProto primary = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.primary_);
            }
            // .CaptionDefProto secondary = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.secondary_);
            }
          }
           {
            // int32 priority = 3;
            if (this_._internal_priority() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_priority());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void CaptionRuleProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CaptionRuleProto*>(&to_msg);
  auto& from = static_cast<const CaptionRuleProto&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CaptionRuleProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.primary_ != nullptr);
      if (_this->_impl_.primary_ == nullptr) {
        _this->_impl_.primary_ =
            ::google::protobuf::MessageLite::CopyConstruct<::CaptionDefProto>(arena, *from._impl_.primary_);
      } else {
        _this->_impl_.primary_->MergeFrom(*from._impl_.primary_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.secondary_ != nullptr);
      if (_this->_impl_.secondary_ == nullptr) {
        _this->_impl_.secondary_ =
            ::google::protobuf::MessageLite::CopyConstruct<::CaptionDefProto>(arena, *from._impl_.secondary_);
      } else {
        _this->_impl_.secondary_->MergeFrom(*from._impl_.secondary_);
      }
    }
  }
  if (from._internal_priority() != 0) {
    _this->_impl_.priority_ = from._impl_.priority_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CaptionRuleProto::CopyFrom(const CaptionRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CaptionRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CaptionRuleProto::InternalSwap(CaptionRuleProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CaptionRuleProto, _impl_.priority_)
      + sizeof(CaptionRuleProto::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(CaptionRuleProto, _impl_.primary_)>(
          reinterpret_cast<char*>(&_impl_.primary_),
          reinterpret_cast<char*>(&other->_impl_.primary_));
}

// ===================================================================

class CircleRuleProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CircleRuleProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CircleRuleProto, _impl_._has_bits_);
};

CircleRuleProto::CircleRuleProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CircleRuleProto)
}
inline PROTOBUF_NDEBUG_INLINE CircleRuleProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CircleRuleProto& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CircleRuleProto::CircleRuleProto(
    ::google::protobuf::Arena* arena,
    const CircleRuleProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CircleRuleProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.border_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::MessageLite::CopyConstruct<::LineDefProto>(
                              arena, *from._impl_.border_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, radius_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, radius_),
           offsetof(Impl_, priority_) -
               offsetof(Impl_, radius_) +
               sizeof(Impl_::priority_));

  // @@protoc_insertion_point(copy_constructor:CircleRuleProto)
}
inline PROTOBUF_NDEBUG_INLINE CircleRuleProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CircleRuleProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, border_),
           0,
           offsetof(Impl_, priority_) -
               offsetof(Impl_, border_) +
               sizeof(Impl_::priority_));
}
CircleRuleProto::~CircleRuleProto() {
  // @@protoc_insertion_point(destructor:CircleRuleProto)
  SharedDtor(*this);
}
inline void CircleRuleProto::SharedDtor(MessageLite& self) {
  CircleRuleProto& this_ = static_cast<CircleRuleProto&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.border_;
  this_._impl_.~Impl_();
}

inline void* CircleRuleProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CircleRuleProto(arena);
}
constexpr auto CircleRuleProto::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CircleRuleProto),
                                            alignof(CircleRuleProto));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<16> CircleRuleProto::_class_data_ = {
    {
        &_CircleRuleProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CircleRuleProto::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<CircleRuleProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CircleRuleProto::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<CircleRuleProto>(), &CircleRuleProto::ByteSizeLong,
            &CircleRuleProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CircleRuleProto, _impl_._cached_size_),
        true,
    },
    "CircleRuleProto",
};
const ::google::protobuf::internal::ClassData* CircleRuleProto::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> CircleRuleProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CircleRuleProto, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CircleRuleProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 priority = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(CircleRuleProto, _impl_.priority_)}},
    // double radius = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(CircleRuleProto, _impl_.radius_)}},
    // uint32 color = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CircleRuleProto, _impl_.color_)}},
    // .LineDefProto border = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(CircleRuleProto, _impl_.border_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double radius = 1;
    {PROTOBUF_FIELD_OFFSET(CircleRuleProto, _impl_.radius_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // uint32 color = 2;
    {PROTOBUF_FIELD_OFFSET(CircleRuleProto, _impl_.color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .LineDefProto border = 3;
    {PROTOBUF_FIELD_OFFSET(CircleRuleProto, _impl_.border_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 priority = 4;
    {PROTOBUF_FIELD_OFFSET(CircleRuleProto, _impl_.priority_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::LineDefProto>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CircleRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CircleRuleProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.border_ != nullptr);
    _impl_.border_->Clear();
  }
  ::memset(&_impl_.radius_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.priority_) -
      reinterpret_cast<char*>(&_impl_.radius_)) + sizeof(_impl_.priority_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CircleRuleProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CircleRuleProto& this_ = static_cast<const CircleRuleProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CircleRuleProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CircleRuleProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:CircleRuleProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double radius = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_radius()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_radius(), target);
          }

          // uint32 color = 2;
          if (this_._internal_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_color(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .LineDefProto border = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.border_, this_._impl_.border_->GetCachedSize(), target,
                stream);
          }

          // int32 priority = 4;
          if (this_._internal_priority() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_priority(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:CircleRuleProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CircleRuleProto::ByteSizeLong(const MessageLite& base) {
          const CircleRuleProto& this_ = static_cast<const CircleRuleProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CircleRuleProto::ByteSizeLong() const {
          const CircleRuleProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:CircleRuleProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .LineDefProto border = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.border_);
            }
          }
           {
            // double radius = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_radius()) != 0) {
              total_size += 9;
            }
            // uint32 color = 2;
            if (this_._internal_color() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_color());
            }
            // int32 priority = 4;
            if (this_._internal_priority() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_priority());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void CircleRuleProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CircleRuleProto*>(&to_msg);
  auto& from = static_cast<const CircleRuleProto&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CircleRuleProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.border_ != nullptr);
    if (_this->_impl_.border_ == nullptr) {
      _this->_impl_.border_ =
          ::google::protobuf::MessageLite::CopyConstruct<::LineDefProto>(arena, *from._impl_.border_);
    } else {
      _this->_impl_.border_->MergeFrom(*from._impl_.border_);
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_radius()) != 0) {
    _this->_impl_.radius_ = from._impl_.radius_;
  }
  if (from._internal_color() != 0) {
    _this->_impl_.color_ = from._impl_.color_;
  }
  if (from._internal_priority() != 0) {
    _this->_impl_.priority_ = from._impl_.priority_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CircleRuleProto::CopyFrom(const CircleRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CircleRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CircleRuleProto::InternalSwap(CircleRuleProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CircleRuleProto, _impl_.priority_)
      + sizeof(CircleRuleProto::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(CircleRuleProto, _impl_.border_)>(
          reinterpret_cast<char*>(&_impl_.border_),
          reinterpret_cast<char*>(&other->_impl_.border_));
}

// ===================================================================

class PathTextRuleProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PathTextRuleProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PathTextRuleProto, _impl_._has_bits_);
};

PathTextRuleProto::PathTextRuleProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:PathTextRuleProto)
}
inline PROTOBUF_NDEBUG_INLINE PathTextRuleProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::PathTextRuleProto& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PathTextRuleProto::PathTextRuleProto(
    ::google::protobuf::Arena* arena,
    const PathTextRuleProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PathTextRuleProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.primary_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::MessageLite::CopyConstruct<::CaptionDefProto>(
                              arena, *from._impl_.primary_)
                        : nullptr;
  _impl_.secondary_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::MessageLite::CopyConstruct<::CaptionDefProto>(
                              arena, *from._impl_.secondary_)
                        : nullptr;
  _impl_.priority_ = from._impl_.priority_;

  // @@protoc_insertion_point(copy_constructor:PathTextRuleProto)
}
inline PROTOBUF_NDEBUG_INLINE PathTextRuleProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PathTextRuleProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, primary_),
           0,
           offsetof(Impl_, priority_) -
               offsetof(Impl_, primary_) +
               sizeof(Impl_::priority_));
}
PathTextRuleProto::~PathTextRuleProto() {
  // @@protoc_insertion_point(destructor:PathTextRuleProto)
  SharedDtor(*this);
}
inline void PathTextRuleProto::SharedDtor(MessageLite& self) {
  PathTextRuleProto& this_ = static_cast<PathTextRuleProto&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.primary_;
  delete this_._impl_.secondary_;
  this_._impl_.~Impl_();
}

inline void* PathTextRuleProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PathTextRuleProto(arena);
}
constexpr auto PathTextRuleProto::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PathTextRuleProto),
                                            alignof(PathTextRuleProto));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<18> PathTextRuleProto::_class_data_ = {
    {
        &_PathTextRuleProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PathTextRuleProto::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<PathTextRuleProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PathTextRuleProto::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<PathTextRuleProto>(), &PathTextRuleProto::ByteSizeLong,
            &PathTextRuleProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PathTextRuleProto, _impl_._cached_size_),
        true,
    },
    "PathTextRuleProto",
};
const ::google::protobuf::internal::ClassData* PathTextRuleProto::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> PathTextRuleProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PathTextRuleProto, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::PathTextRuleProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .CaptionDefProto primary = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PathTextRuleProto, _impl_.primary_)}},
    // .CaptionDefProto secondary = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(PathTextRuleProto, _impl_.secondary_)}},
    // int32 priority = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PathTextRuleProto, _impl_.priority_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .CaptionDefProto primary = 1;
    {PROTOBUF_FIELD_OFFSET(PathTextRuleProto, _impl_.primary_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .CaptionDefProto secondary = 2;
    {PROTOBUF_FIELD_OFFSET(PathTextRuleProto, _impl_.secondary_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 priority = 3;
    {PROTOBUF_FIELD_OFFSET(PathTextRuleProto, _impl_.priority_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CaptionDefProto>()},
    {::_pbi::TcParser::GetTable<::CaptionDefProto>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PathTextRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:PathTextRuleProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.primary_ != nullptr);
      _impl_.primary_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.secondary_ != nullptr);
      _impl_.secondary_->Clear();
    }
  }
  _impl_.priority_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PathTextRuleProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PathTextRuleProto& this_ = static_cast<const PathTextRuleProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PathTextRuleProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PathTextRuleProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:PathTextRuleProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .CaptionDefProto primary = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.primary_, this_._impl_.primary_->GetCachedSize(), target,
                stream);
          }

          // .CaptionDefProto secondary = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.secondary_, this_._impl_.secondary_->GetCachedSize(), target,
                stream);
          }

          // int32 priority = 3;
          if (this_._internal_priority() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_priority(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:PathTextRuleProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PathTextRuleProto::ByteSizeLong(const MessageLite& base) {
          const PathTextRuleProto& this_ = static_cast<const PathTextRuleProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PathTextRuleProto::ByteSizeLong() const {
          const PathTextRuleProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:PathTextRuleProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .CaptionDefProto primary = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.primary_);
            }
            // .CaptionDefProto secondary = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.secondary_);
            }
          }
           {
            // int32 priority = 3;
            if (this_._internal_priority() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_priority());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void PathTextRuleProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PathTextRuleProto*>(&to_msg);
  auto& from = static_cast<const PathTextRuleProto&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:PathTextRuleProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.primary_ != nullptr);
      if (_this->_impl_.primary_ == nullptr) {
        _this->_impl_.primary_ =
            ::google::protobuf::MessageLite::CopyConstruct<::CaptionDefProto>(arena, *from._impl_.primary_);
      } else {
        _this->_impl_.primary_->MergeFrom(*from._impl_.primary_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.secondary_ != nullptr);
      if (_this->_impl_.secondary_ == nullptr) {
        _this->_impl_.secondary_ =
            ::google::protobuf::MessageLite::CopyConstruct<::CaptionDefProto>(arena, *from._impl_.secondary_);
      } else {
        _this->_impl_.secondary_->MergeFrom(*from._impl_.secondary_);
      }
    }
  }
  if (from._internal_priority() != 0) {
    _this->_impl_.priority_ = from._impl_.priority_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PathTextRuleProto::CopyFrom(const PathTextRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PathTextRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PathTextRuleProto::InternalSwap(PathTextRuleProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathTextRuleProto, _impl_.priority_)
      + sizeof(PathTextRuleProto::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(PathTextRuleProto, _impl_.primary_)>(
          reinterpret_cast<char*>(&_impl_.primary_),
          reinterpret_cast<char*>(&other->_impl_.primary_));
}

// ===================================================================

class ShieldRuleProto::_Internal {
 public:
};

ShieldRuleProto::ShieldRuleProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ShieldRuleProto)
}
ShieldRuleProto::ShieldRuleProto(
    ::google::protobuf::Arena* arena, const ShieldRuleProto& from)
    : ShieldRuleProto(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ShieldRuleProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ShieldRuleProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, height_),
           0,
           offsetof(Impl_, text_stroke_color_) -
               offsetof(Impl_, height_) +
               sizeof(Impl_::text_stroke_color_));
}
ShieldRuleProto::~ShieldRuleProto() {
  // @@protoc_insertion_point(destructor:ShieldRuleProto)
  SharedDtor(*this);
}
inline void ShieldRuleProto::SharedDtor(MessageLite& self) {
  ShieldRuleProto& this_ = static_cast<ShieldRuleProto&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ShieldRuleProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ShieldRuleProto(arena);
}
constexpr auto ShieldRuleProto::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ShieldRuleProto),
                                            alignof(ShieldRuleProto));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<16> ShieldRuleProto::_class_data_ = {
    {
        &_ShieldRuleProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ShieldRuleProto::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<ShieldRuleProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ShieldRuleProto::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<ShieldRuleProto>(), &ShieldRuleProto::ByteSizeLong,
            &ShieldRuleProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ShieldRuleProto, _impl_._cached_size_),
        true,
    },
    "ShieldRuleProto",
};
const ::google::protobuf::internal::ClassData* ShieldRuleProto::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> ShieldRuleProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ShieldRuleProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 height = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ShieldRuleProto, _impl_.height_)}},
    // uint32 color = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ShieldRuleProto, _impl_.color_)}},
    // uint32 stroke_color = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ShieldRuleProto, _impl_.stroke_color_)}},
    // int32 priority = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ShieldRuleProto, _impl_.priority_)}},
    // int32 min_distance = 5;
    {::_pbi::TcParser::FastV32S1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ShieldRuleProto, _impl_.min_distance_)}},
    // uint32 text_color = 6;
    {::_pbi::TcParser::FastV32S1,
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ShieldRuleProto, _impl_.text_color_)}},
    // uint32 text_stroke_color = 7;
    {::_pbi::TcParser::FastV32S1,
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(ShieldRuleProto, _impl_.text_stroke_color_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 height = 1;
    {PROTOBUF_FIELD_OFFSET(ShieldRuleProto, _impl_.height_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // uint32 color = 2;
    {PROTOBUF_FIELD_OFFSET(ShieldRuleProto, _impl_.color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 stroke_color = 3;
    {PROTOBUF_FIELD_OFFSET(ShieldRuleProto, _impl_.stroke_color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // int32 priority = 4;
    {PROTOBUF_FIELD_OFFSET(ShieldRuleProto, _impl_.priority_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 min_distance = 5;
    {PROTOBUF_FIELD_OFFSET(ShieldRuleProto, _impl_.min_distance_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // uint32 text_color = 6;
    {PROTOBUF_FIELD_OFFSET(ShieldRuleProto, _impl_.text_color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 text_stroke_color = 7;
    {PROTOBUF_FIELD_OFFSET(ShieldRuleProto, _impl_.text_stroke_color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ShieldRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ShieldRuleProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.text_stroke_color_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.text_stroke_color_));
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ShieldRuleProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ShieldRuleProto& this_ = static_cast<const ShieldRuleProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ShieldRuleProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ShieldRuleProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:ShieldRuleProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 height = 1;
          if (this_._internal_height() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_height(), target);
          }

          // uint32 color = 2;
          if (this_._internal_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_color(), target);
          }

          // uint32 stroke_color = 3;
          if (this_._internal_stroke_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_stroke_color(), target);
          }

          // int32 priority = 4;
          if (this_._internal_priority() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_priority(), target);
          }

          // int32 min_distance = 5;
          if (this_._internal_min_distance() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_min_distance(), target);
          }

          // uint32 text_color = 6;
          if (this_._internal_text_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                6, this_._internal_text_color(), target);
          }

          // uint32 text_stroke_color = 7;
          if (this_._internal_text_stroke_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                7, this_._internal_text_stroke_color(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:ShieldRuleProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ShieldRuleProto::ByteSizeLong(const MessageLite& base) {
          const ShieldRuleProto& this_ = static_cast<const ShieldRuleProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ShieldRuleProto::ByteSizeLong() const {
          const ShieldRuleProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:ShieldRuleProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int32 height = 1;
            if (this_._internal_height() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_height());
            }
            // uint32 color = 2;
            if (this_._internal_color() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_color());
            }
            // uint32 stroke_color = 3;
            if (this_._internal_stroke_color() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_stroke_color());
            }
            // int32 priority = 4;
            if (this_._internal_priority() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_priority());
            }
            // int32 min_distance = 5;
            if (this_._internal_min_distance() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_min_distance());
            }
            // uint32 text_color = 6;
            if (this_._internal_text_color() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_text_color());
            }
            // uint32 text_stroke_color = 7;
            if (this_._internal_text_stroke_color() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_text_stroke_color());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void ShieldRuleProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ShieldRuleProto*>(&to_msg);
  auto& from = static_cast<const ShieldRuleProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ShieldRuleProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _this->_impl_.height_ = from._impl_.height_;
  }
  if (from._internal_color() != 0) {
    _this->_impl_.color_ = from._impl_.color_;
  }
  if (from._internal_stroke_color() != 0) {
    _this->_impl_.stroke_color_ = from._impl_.stroke_color_;
  }
  if (from._internal_priority() != 0) {
    _this->_impl_.priority_ = from._impl_.priority_;
  }
  if (from._internal_min_distance() != 0) {
    _this->_impl_.min_distance_ = from._impl_.min_distance_;
  }
  if (from._internal_text_color() != 0) {
    _this->_impl_.text_color_ = from._impl_.text_color_;
  }
  if (from._internal_text_stroke_color() != 0) {
    _this->_impl_.text_stroke_color_ = from._impl_.text_stroke_color_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShieldRuleProto::CopyFrom(const ShieldRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShieldRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ShieldRuleProto::InternalSwap(ShieldRuleProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShieldRuleProto, _impl_.text_stroke_color_)
      + sizeof(ShieldRuleProto::_impl_.text_stroke_color_)
      - PROTOBUF_FIELD_OFFSET(ShieldRuleProto, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

// ===================================================================

class DrawElementProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DrawElementProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_._has_bits_);
};

DrawElementProto::DrawElementProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DrawElementProto)
}
inline PROTOBUF_NDEBUG_INLINE DrawElementProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::DrawElementProto& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        lines_{visibility, arena, from.lines_},
        apply_if_{visibility, arena, from.apply_if_} {}

DrawElementProto::DrawElementProto(
    ::google::protobuf::Arena* arena,
    const DrawElementProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DrawElementProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.area_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::MessageLite::CopyConstruct<::AreaRuleProto>(
                              arena, *from._impl_.area_)
                        : nullptr;
  _impl_.symbol_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::MessageLite::CopyConstruct<::SymbolRuleProto>(
                              arena, *from._impl_.symbol_)
                        : nullptr;
  _impl_.caption_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::MessageLite::CopyConstruct<::CaptionRuleProto>(
                              arena, *from._impl_.caption_)
                        : nullptr;
  _impl_.circle_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::MessageLite::CopyConstruct<::CircleRuleProto>(
                              arena, *from._impl_.circle_)
                        : nullptr;
  _impl_.path_text_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::MessageLite::CopyConstruct<::PathTextRuleProto>(
                              arena, *from._impl_.path_text_)
                        : nullptr;
  _impl_.shield_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::MessageLite::CopyConstruct<::ShieldRuleProto>(
                              arena, *from._impl_.shield_)
                        : nullptr;
  _impl_.scale_ = from._impl_.scale_;

  // @@protoc_insertion_point(copy_constructor:DrawElementProto)
}
inline PROTOBUF_NDEBUG_INLINE DrawElementProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        lines_{visibility, arena},
        apply_if_{visibility, arena} {}

inline void DrawElementProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, area_),
           0,
           offsetof(Impl_, scale_) -
               offsetof(Impl_, area_) +
               sizeof(Impl_::scale_));
}
DrawElementProto::~DrawElementProto() {
  // @@protoc_insertion_point(destructor:DrawElementProto)
  SharedDtor(*this);
}
inline void DrawElementProto::SharedDtor(MessageLite& self) {
  DrawElementProto& this_ = static_cast<DrawElementProto&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.area_;
  delete this_._impl_.symbol_;
  delete this_._impl_.caption_;
  delete this_._impl_.circle_;
  delete this_._impl_.path_text_;
  delete this_._impl_.shield_;
  this_._impl_.~Impl_();
}

inline void* DrawElementProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DrawElementProto(arena);
}
constexpr auto DrawElementProto::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.lines_) +
          decltype(DrawElementProto::_impl_.lines_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.apply_if_) +
          decltype(DrawElementProto::_impl_.apply_if_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(DrawElementProto), alignof(DrawElementProto), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DrawElementProto::PlacementNew_,
                                 sizeof(DrawElementProto),
                                 alignof(DrawElementProto));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<17> DrawElementProto::_class_data_ = {
    {
        &_DrawElementProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DrawElementProto::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<DrawElementProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DrawElementProto::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<DrawElementProto>(), &DrawElementProto::ByteSizeLong,
            &DrawElementProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_._cached_size_),
        true,
    },
    "DrawElementProto",
};
const ::google::protobuf::internal::ClassData* DrawElementProto::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 7, 41, 2> DrawElementProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    7,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::DrawElementProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 scale = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.scale_)}},
    // repeated .LineRuleProto lines = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.lines_)}},
    // .AreaRuleProto area = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 1, PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.area_)}},
    // .SymbolRuleProto symbol = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 2, PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.symbol_)}},
    // .CaptionRuleProto caption = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 3, PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.caption_)}},
    // .CircleRuleProto circle = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 3, 4, PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.circle_)}},
    // .PathTextRuleProto path_text = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 4, 5, PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.path_text_)}},
    // .ShieldRuleProto shield = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 5, 6, PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.shield_)}},
    // repeated string apply_if = 9;
    {::_pbi::TcParser::FastUR1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.apply_if_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 scale = 1;
    {PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.scale_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .LineRuleProto lines = 2;
    {PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.lines_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .AreaRuleProto area = 3;
    {PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.area_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .SymbolRuleProto symbol = 4;
    {PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.symbol_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .CaptionRuleProto caption = 5;
    {PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.caption_), _Internal::kHasBitsOffset + 2, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .CircleRuleProto circle = 6;
    {PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.circle_), _Internal::kHasBitsOffset + 3, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .PathTextRuleProto path_text = 7;
    {PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.path_text_), _Internal::kHasBitsOffset + 4, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ShieldRuleProto shield = 8;
    {PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.shield_), _Internal::kHasBitsOffset + 5, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string apply_if = 9;
    {PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.apply_if_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::LineRuleProto>()},
    {::_pbi::TcParser::GetTable<::AreaRuleProto>()},
    {::_pbi::TcParser::GetTable<::SymbolRuleProto>()},
    {::_pbi::TcParser::GetTable<::CaptionRuleProto>()},
    {::_pbi::TcParser::GetTable<::CircleRuleProto>()},
    {::_pbi::TcParser::GetTable<::PathTextRuleProto>()},
    {::_pbi::TcParser::GetTable<::ShieldRuleProto>()},
  }}, {{
    "\20\0\0\0\0\0\0\0\0\10\0\0\0\0\0\0"
    "DrawElementProto"
    "apply_if"
  }},
};

PROTOBUF_NOINLINE void DrawElementProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DrawElementProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lines_.Clear();
  _impl_.apply_if_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.area_ != nullptr);
      _impl_.area_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.symbol_ != nullptr);
      _impl_.symbol_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.caption_ != nullptr);
      _impl_.caption_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.circle_ != nullptr);
      _impl_.circle_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.path_text_ != nullptr);
      _impl_.path_text_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.shield_ != nullptr);
      _impl_.shield_->Clear();
    }
  }
  _impl_.scale_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DrawElementProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DrawElementProto& this_ = static_cast<const DrawElementProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DrawElementProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DrawElementProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:DrawElementProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 scale = 1;
          if (this_._internal_scale() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_scale(), target);
          }

          // repeated .LineRuleProto lines = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_lines_size());
               i < n; i++) {
            const auto& repfield = this_._internal_lines().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .AreaRuleProto area = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.area_, this_._impl_.area_->GetCachedSize(), target,
                stream);
          }

          // .SymbolRuleProto symbol = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.symbol_, this_._impl_.symbol_->GetCachedSize(), target,
                stream);
          }

          // .CaptionRuleProto caption = 5;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.caption_, this_._impl_.caption_->GetCachedSize(), target,
                stream);
          }

          // .CircleRuleProto circle = 6;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.circle_, this_._impl_.circle_->GetCachedSize(), target,
                stream);
          }

          // .PathTextRuleProto path_text = 7;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.path_text_, this_._impl_.path_text_->GetCachedSize(), target,
                stream);
          }

          // .ShieldRuleProto shield = 8;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.shield_, this_._impl_.shield_->GetCachedSize(), target,
                stream);
          }

          // repeated string apply_if = 9;
          for (int i = 0, n = this_._internal_apply_if_size(); i < n; ++i) {
            const auto& s = this_._internal_apply_if().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "DrawElementProto.apply_if");
            target = stream->WriteString(9, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:DrawElementProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DrawElementProto::ByteSizeLong(const MessageLite& base) {
          const DrawElementProto& this_ = static_cast<const DrawElementProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DrawElementProto::ByteSizeLong() const {
          const DrawElementProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:DrawElementProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .LineRuleProto lines = 2;
            {
              total_size += 1UL * this_._internal_lines_size();
              for (const auto& msg : this_._internal_lines()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated string apply_if = 9;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_apply_if().size());
              for (int i = 0, n = this_._internal_apply_if().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_apply_if().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000003fu) {
            // .AreaRuleProto area = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.area_);
            }
            // .SymbolRuleProto symbol = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.symbol_);
            }
            // .CaptionRuleProto caption = 5;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.caption_);
            }
            // .CircleRuleProto circle = 6;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.circle_);
            }
            // .PathTextRuleProto path_text = 7;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.path_text_);
            }
            // .ShieldRuleProto shield = 8;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.shield_);
            }
          }
           {
            // int32 scale = 1;
            if (this_._internal_scale() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_scale());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void DrawElementProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DrawElementProto*>(&to_msg);
  auto& from = static_cast<const DrawElementProto&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:DrawElementProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_lines()->MergeFrom(
      from._internal_lines());
  _this->_internal_mutable_apply_if()->MergeFrom(from._internal_apply_if());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.area_ != nullptr);
      if (_this->_impl_.area_ == nullptr) {
        _this->_impl_.area_ =
            ::google::protobuf::MessageLite::CopyConstruct<::AreaRuleProto>(arena, *from._impl_.area_);
      } else {
        _this->_impl_.area_->MergeFrom(*from._impl_.area_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.symbol_ != nullptr);
      if (_this->_impl_.symbol_ == nullptr) {
        _this->_impl_.symbol_ =
            ::google::protobuf::MessageLite::CopyConstruct<::SymbolRuleProto>(arena, *from._impl_.symbol_);
      } else {
        _this->_impl_.symbol_->MergeFrom(*from._impl_.symbol_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.caption_ != nullptr);
      if (_this->_impl_.caption_ == nullptr) {
        _this->_impl_.caption_ =
            ::google::protobuf::MessageLite::CopyConstruct<::CaptionRuleProto>(arena, *from._impl_.caption_);
      } else {
        _this->_impl_.caption_->MergeFrom(*from._impl_.caption_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.circle_ != nullptr);
      if (_this->_impl_.circle_ == nullptr) {
        _this->_impl_.circle_ =
            ::google::protobuf::MessageLite::CopyConstruct<::CircleRuleProto>(arena, *from._impl_.circle_);
      } else {
        _this->_impl_.circle_->MergeFrom(*from._impl_.circle_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.path_text_ != nullptr);
      if (_this->_impl_.path_text_ == nullptr) {
        _this->_impl_.path_text_ =
            ::google::protobuf::MessageLite::CopyConstruct<::PathTextRuleProto>(arena, *from._impl_.path_text_);
      } else {
        _this->_impl_.path_text_->MergeFrom(*from._impl_.path_text_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.shield_ != nullptr);
      if (_this->_impl_.shield_ == nullptr) {
        _this->_impl_.shield_ =
            ::google::protobuf::MessageLite::CopyConstruct<::ShieldRuleProto>(arena, *from._impl_.shield_);
      } else {
        _this->_impl_.shield_->MergeFrom(*from._impl_.shield_);
      }
    }
  }
  if (from._internal_scale() != 0) {
    _this->_impl_.scale_ = from._impl_.scale_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DrawElementProto::CopyFrom(const DrawElementProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DrawElementProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DrawElementProto::InternalSwap(DrawElementProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.lines_.InternalSwap(&other->_impl_.lines_);
  _impl_.apply_if_.InternalSwap(&other->_impl_.apply_if_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.scale_)
      + sizeof(DrawElementProto::_impl_.scale_)
      - PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.area_)>(
          reinterpret_cast<char*>(&_impl_.area_),
          reinterpret_cast<char*>(&other->_impl_.area_));
}

// ===================================================================

class ClassifElementProto::_Internal {
 public:
};

ClassifElementProto::ClassifElementProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ClassifElementProto)
}
inline PROTOBUF_NDEBUG_INLINE ClassifElementProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::ClassifElementProto& from_msg)
      : element_{visibility, arena, from.element_},
        name_(arena, from.name_),
        _cached_size_{0} {}

ClassifElementProto::ClassifElementProto(
    ::google::protobuf::Arena* arena,
    const ClassifElementProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ClassifElementProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:ClassifElementProto)
}
inline PROTOBUF_NDEBUG_INLINE ClassifElementProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : element_{visibility, arena},
        name_(arena),
        _cached_size_{0} {}

inline void ClassifElementProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ClassifElementProto::~ClassifElementProto() {
  // @@protoc_insertion_point(destructor:ClassifElementProto)
  SharedDtor(*this);
}
inline void ClassifElementProto::SharedDtor(MessageLite& self) {
  ClassifElementProto& this_ = static_cast<ClassifElementProto&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ClassifElementProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ClassifElementProto(arena);
}
constexpr auto ClassifElementProto::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ClassifElementProto, _impl_.element_) +
          decltype(ClassifElementProto::_impl_.element_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ClassifElementProto), alignof(ClassifElementProto), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ClassifElementProto::PlacementNew_,
                                 sizeof(ClassifElementProto),
                                 alignof(ClassifElementProto));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<20> ClassifElementProto::_class_data_ = {
    {
        &_ClassifElementProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ClassifElementProto::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<ClassifElementProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ClassifElementProto::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<ClassifElementProto>(), &ClassifElementProto::ByteSizeLong,
            &ClassifElementProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ClassifElementProto, _impl_._cached_size_),
        true,
    },
    "ClassifElementProto",
};
const ::google::protobuf::internal::ClassData* ClassifElementProto::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 32, 2> ClassifElementProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ClassifElementProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .DrawElementProto element = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ClassifElementProto, _impl_.element_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ClassifElementProto, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(ClassifElementProto, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .DrawElementProto element = 2;
    {PROTOBUF_FIELD_OFFSET(ClassifElementProto, _impl_.element_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::DrawElementProto>()},
  }}, {{
    "\23\4\0\0\0\0\0\0"
    "ClassifElementProto"
    "name"
  }},
};

PROTOBUF_NOINLINE void ClassifElementProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ClassifElementProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.element_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ClassifElementProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ClassifElementProto& this_ = static_cast<const ClassifElementProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ClassifElementProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ClassifElementProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:ClassifElementProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ClassifElementProto.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // repeated .DrawElementProto element = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_element_size());
               i < n; i++) {
            const auto& repfield = this_._internal_element().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:ClassifElementProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ClassifElementProto::ByteSizeLong(const MessageLite& base) {
          const ClassifElementProto& this_ = static_cast<const ClassifElementProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ClassifElementProto::ByteSizeLong() const {
          const ClassifElementProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:ClassifElementProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .DrawElementProto element = 2;
            {
              total_size += 1UL * this_._internal_element_size();
              for (const auto& msg : this_._internal_element()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string name = 1;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void ClassifElementProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ClassifElementProto*>(&to_msg);
  auto& from = static_cast<const ClassifElementProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClassifElementProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_element()->MergeFrom(
      from._internal_element());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClassifElementProto::CopyFrom(const ClassifElementProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClassifElementProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ClassifElementProto::InternalSwap(ClassifElementProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.element_.InternalSwap(&other->_impl_.element_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
}

// ===================================================================

class ColorElementProto::_Internal {
 public:
};

ColorElementProto::ColorElementProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ColorElementProto)
}
inline PROTOBUF_NDEBUG_INLINE ColorElementProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::ColorElementProto& from_msg)
      : name_(arena, from.name_),
        _cached_size_{0} {}

ColorElementProto::ColorElementProto(
    ::google::protobuf::Arena* arena,
    const ColorElementProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ColorElementProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, color_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, color_),
           offsetof(Impl_, y_) -
               offsetof(Impl_, color_) +
               sizeof(Impl_::y_));

  // @@protoc_insertion_point(copy_constructor:ColorElementProto)
}
inline PROTOBUF_NDEBUG_INLINE ColorElementProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : name_(arena),
        _cached_size_{0} {}

inline void ColorElementProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, color_),
           0,
           offsetof(Impl_, y_) -
               offsetof(Impl_, color_) +
               sizeof(Impl_::y_));
}
ColorElementProto::~ColorElementProto() {
  // @@protoc_insertion_point(destructor:ColorElementProto)
  SharedDtor(*this);
}
inline void ColorElementProto::SharedDtor(MessageLite& self) {
  ColorElementProto& this_ = static_cast<ColorElementProto&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ColorElementProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ColorElementProto(arena);
}
constexpr auto ColorElementProto::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ColorElementProto),
                                            alignof(ColorElementProto));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<18> ColorElementProto::_class_data_ = {
    {
        &_ColorElementProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ColorElementProto::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<ColorElementProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ColorElementProto::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<ColorElementProto>(), &ColorElementProto::ByteSizeLong,
            &ColorElementProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ColorElementProto, _impl_._cached_size_),
        true,
    },
    "ColorElementProto",
};
const ::google::protobuf::internal::ClassData* ColorElementProto::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 30, 2> ColorElementProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ColorElementProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float y = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(ColorElementProto, _impl_.y_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ColorElementProto, _impl_.name_)}},
    // uint32 color = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ColorElementProto, _impl_.color_)}},
    // float x = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(ColorElementProto, _impl_.x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(ColorElementProto, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 color = 2;
    {PROTOBUF_FIELD_OFFSET(ColorElementProto, _impl_.color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // float x = 3;
    {PROTOBUF_FIELD_OFFSET(ColorElementProto, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 4;
    {PROTOBUF_FIELD_OFFSET(ColorElementProto, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
    "\21\4\0\0\0\0\0\0"
    "ColorElementProto"
    "name"
  }},
};

PROTOBUF_NOINLINE void ColorElementProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ColorElementProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.color_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ColorElementProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ColorElementProto& this_ = static_cast<const ColorElementProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ColorElementProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ColorElementProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:ColorElementProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ColorElementProto.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // uint32 color = 2;
          if (this_._internal_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_color(), target);
          }

          // float x = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_x(), target);
          }

          // float y = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_y(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:ColorElementProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ColorElementProto::ByteSizeLong(const MessageLite& base) {
          const ColorElementProto& this_ = static_cast<const ColorElementProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ColorElementProto::ByteSizeLong() const {
          const ColorElementProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:ColorElementProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string name = 1;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // uint32 color = 2;
            if (this_._internal_color() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_color());
            }
            // float x = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
              total_size += 5;
            }
            // float y = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
              total_size += 5;
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void ColorElementProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ColorElementProto*>(&to_msg);
  auto& from = static_cast<const ColorElementProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ColorElementProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_color() != 0) {
    _this->_impl_.color_ = from._impl_.color_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_x()) != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_y()) != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ColorElementProto::CopyFrom(const ColorElementProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColorElementProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ColorElementProto::InternalSwap(ColorElementProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColorElementProto, _impl_.y_)
      + sizeof(ColorElementProto::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(ColorElementProto, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

// ===================================================================

class ColorsElementProto::_Internal {
 public:
};

ColorsElementProto::ColorsElementProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ColorsElementProto)
}
inline PROTOBUF_NDEBUG_INLINE ColorsElementProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::ColorsElementProto& from_msg)
      : value_{visibility, arena, from.value_},
        _cached_size_{0} {}

ColorsElementProto::ColorsElementProto(
    ::google::protobuf::Arena* arena,
    const ColorsElementProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ColorsElementProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:ColorsElementProto)
}
inline PROTOBUF_NDEBUG_INLINE ColorsElementProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : value_{visibility, arena},
        _cached_size_{0} {}

inline void ColorsElementProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ColorsElementProto::~ColorsElementProto() {
  // @@protoc_insertion_point(destructor:ColorsElementProto)
  SharedDtor(*this);
}
inline void ColorsElementProto::SharedDtor(MessageLite& self) {
  ColorsElementProto& this_ = static_cast<ColorsElementProto&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ColorsElementProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ColorsElementProto(arena);
}
constexpr auto ColorsElementProto::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ColorsElementProto, _impl_.value_) +
          decltype(ColorsElementProto::_impl_.value_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ColorsElementProto), alignof(ColorsElementProto), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ColorsElementProto::PlacementNew_,
                                 sizeof(ColorsElementProto),
                                 alignof(ColorsElementProto));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<19> ColorsElementProto::_class_data_ = {
    {
        &_ColorsElementProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ColorsElementProto::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<ColorsElementProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ColorsElementProto::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<ColorsElementProto>(), &ColorsElementProto::ByteSizeLong,
            &ColorsElementProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ColorsElementProto, _impl_._cached_size_),
        true,
    },
    "ColorsElementProto",
};
const ::google::protobuf::internal::ClassData* ColorsElementProto::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ColorsElementProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ColorsElementProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .ColorElementProto value = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ColorsElementProto, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .ColorElementProto value = 1;
    {PROTOBUF_FIELD_OFFSET(ColorsElementProto, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::ColorElementProto>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ColorsElementProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ColorsElementProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ColorsElementProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ColorsElementProto& this_ = static_cast<const ColorsElementProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ColorsElementProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ColorsElementProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:ColorsElementProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .ColorElementProto value = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_value_size());
               i < n; i++) {
            const auto& repfield = this_._internal_value().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:ColorsElementProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ColorsElementProto::ByteSizeLong(const MessageLite& base) {
          const ColorsElementProto& this_ = static_cast<const ColorsElementProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ColorsElementProto::ByteSizeLong() const {
          const ColorsElementProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:ColorsElementProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .ColorElementProto value = 1;
            {
              total_size += 1UL * this_._internal_value_size();
              for (const auto& msg : this_._internal_value()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void ColorsElementProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ColorsElementProto*>(&to_msg);
  auto& from = static_cast<const ColorsElementProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ColorsElementProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_value()->MergeFrom(
      from._internal_value());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ColorsElementProto::CopyFrom(const ColorsElementProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColorsElementProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ColorsElementProto::InternalSwap(ColorsElementProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

// ===================================================================

class ContainerProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ContainerProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ContainerProto, _impl_._has_bits_);
};

ContainerProto::ContainerProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ContainerProto)
}
inline PROTOBUF_NDEBUG_INLINE ContainerProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::ContainerProto& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        cont_{visibility, arena, from.cont_} {}

ContainerProto::ContainerProto(
    ::google::protobuf::Arena* arena,
    const ContainerProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ContainerProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.colors_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::MessageLite::CopyConstruct<::ColorsElementProto>(
                              arena, *from._impl_.colors_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:ContainerProto)
}
inline PROTOBUF_NDEBUG_INLINE ContainerProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        cont_{visibility, arena} {}

inline void ContainerProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.colors_ = {};
}
ContainerProto::~ContainerProto() {
  // @@protoc_insertion_point(destructor:ContainerProto)
  SharedDtor(*this);
}
inline void ContainerProto::SharedDtor(MessageLite& self) {
  ContainerProto& this_ = static_cast<ContainerProto&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.colors_;
  this_._impl_.~Impl_();
}

inline void* ContainerProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ContainerProto(arena);
}
constexpr auto ContainerProto::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ContainerProto, _impl_.cont_) +
          decltype(ContainerProto::_impl_.cont_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ContainerProto), alignof(ContainerProto), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ContainerProto::PlacementNew_,
                                 sizeof(ContainerProto),
                                 alignof(ContainerProto));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<15> ContainerProto::_class_data_ = {
    {
        &_ContainerProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ContainerProto::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<ContainerProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ContainerProto::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<ContainerProto>(), &ContainerProto::ByteSizeLong,
            &ContainerProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ContainerProto, _impl_._cached_size_),
        true,
    },
    "ContainerProto",
};
const ::google::protobuf::internal::ClassData* ContainerProto::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> ContainerProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ContainerProto, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ContainerProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .ColorsElementProto colors = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(ContainerProto, _impl_.colors_)}},
    // repeated .ClassifElementProto cont = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ContainerProto, _impl_.cont_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .ClassifElementProto cont = 1;
    {PROTOBUF_FIELD_OFFSET(ContainerProto, _impl_.cont_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ColorsElementProto colors = 2;
    {PROTOBUF_FIELD_OFFSET(ContainerProto, _impl_.colors_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::ClassifElementProto>()},
    {::_pbi::TcParser::GetTable<::ColorsElementProto>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ContainerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ContainerProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cont_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.colors_ != nullptr);
    _impl_.colors_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ContainerProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ContainerProto& this_ = static_cast<const ContainerProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ContainerProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ContainerProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:ContainerProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .ClassifElementProto cont = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_cont_size());
               i < n; i++) {
            const auto& repfield = this_._internal_cont().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .ColorsElementProto colors = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.colors_, this_._impl_.colors_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:ContainerProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ContainerProto::ByteSizeLong(const MessageLite& base) {
          const ContainerProto& this_ = static_cast<const ContainerProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ContainerProto::ByteSizeLong() const {
          const ContainerProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:ContainerProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .ClassifElementProto cont = 1;
            {
              total_size += 1UL * this_._internal_cont_size();
              for (const auto& msg : this_._internal_cont()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .ColorsElementProto colors = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.colors_);
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void ContainerProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ContainerProto*>(&to_msg);
  auto& from = static_cast<const ContainerProto&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ContainerProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_cont()->MergeFrom(
      from._internal_cont());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.colors_ != nullptr);
    if (_this->_impl_.colors_ == nullptr) {
      _this->_impl_.colors_ =
          ::google::protobuf::MessageLite::CopyConstruct<::ColorsElementProto>(arena, *from._impl_.colors_);
    } else {
      _this->_impl_.colors_->MergeFrom(*from._impl_.colors_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ContainerProto::CopyFrom(const ContainerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContainerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ContainerProto::InternalSwap(ContainerProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cont_.InternalSwap(&other->_impl_.cont_);
  swap(_impl_.colors_, other->_impl_.colors_);
}

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
